using System;
using System.Diagnostics.Contracts;

namespace Lab.gui
{
    /// <summary>
    /// Provides a bitmap generated by using a lookup table on 8-bit data
    /// </summary>
    public unsafe class BitmapLookup8 : BitmapLookupBase<byte>
    {
        public BitmapLookup8(int width, int height) : this(width, height, false) { }

        public BitmapLookup8(int width, int height, bool setBasicGrayscale)
            : base(width, height)
        {
            if (setBasicGrayscale)
                for (int i = 0; i < 256; i++)
                {
                    byte b = (byte)i;
                    base.lut[i] = LinearSaturatingLookupTable.ToBGR32(b, b, b);
                }
        }

        /// <summary>
        /// Rebuilds the entire Bitmap by mapping DataBuffer through LookupTable.
        /// </summary>
        public override void Remap()
        {
            fixed (byte* pGray = gray)
            fixed (uint* pLut = lut)
                Map(pGray, pLut, bgr32, gray.Length);
        }

        // no side effects, so it is completely thread safe
        // if re-entrant, we'll just get a race condition for overwrite
        // and possibly an incorrupt histogram
        [Pure]
        protected static void Map(byte* pGray, uint* pLut, uint* pBgr32, int length)
        {
            var bgr32End = pBgr32 + length;

            while (pBgr32 < bgr32End)
            {
                byte grayValue = *pGray++;
                *pBgr32++ = pLut[grayValue];
            }
        }

    }
}
