using System;
using System.Runtime.InteropServices;

namespace eas_lab.gui
{
    /// <summary>
    /// Provides a bitmap generated by using a lookup table
    /// </summary>
    /// <remarks>
    /// Modified from http://social.msdn.microsoft.com/Forums/en-US/wpf/thread/66187857-c243-4704-922b-a47d4bde07ec/
    /// </remarks>
    public abstract unsafe class BitmapLookupBase<T> : MemMappedBitmap, IBitmapLookup
    {
        static readonly int SizeOfT;
        static readonly int LookupTableLength;

        static BitmapLookupBase()
        {
            int size = Marshal.SizeOf(typeof(T));
            if (size <= 2)
                SizeOfT = size;
            else
                throw new Exception("A lookup table is only practical for 1 or 2 byte data elements");

            LookupTableLength = (1 << (8 * size));
        }

        protected readonly T[] gray;
        protected readonly uint[] lut;

        public BitmapLookupBase(int width, int height)
            :base(width, height)
        {
            gray = new T[width * height];
            lut = new uint[LookupTableLength];
        }

        /// <summary>
        /// The lookup table.  Place BGR32 values in here.
        /// </summary>
        public uint[] LookupTable { get { return lut; } }

        /// <summary>
        /// The data.  Dimensions were fixed when this object was constructed.
        /// </summary>
        public T[] DataBuffer { get { return gray; } }

        /// <summary>
        /// Rebuilds the entire Bitmap by mapping DataBuffer through LookupTable.
        /// Should be safely call-able from any thread.
        /// After this completes, call Invalidate() on the UI thread
        /// </summary>
        public abstract void Remap();

        Array IDataBitmapBackside.DataBuffer { get { return DataBuffer; } }

    }
}
